mistakes + things to be aware of.

1. need to remember that the second arguments in python are often non-inclusive
  - so for example, if you are using a for loop to do sliding window, you need to remember that the second argument
    of range and the second argument of the slice are non-inclusive, so you need to do + 1 for one of them. otherwise
    you will cut out the last element
    ex:
    for i in range(len(prefix), len(s) + 1):
      if s[i - len(prefix): i] == prefix:
        continue # some action

2. when using "".join(nums), all elements in the array must be strings
  - ex: nums = [1, 2, 3] -> res = "".join(nums) -> WRONG
        nums = ['1', '2', '3'] -> res = "".join(nums) -> RIGHT

3. when backtracking in an n! setting, use a list instead of a set for the available numbers
  - def backtrack(curr, available):
            if len(curr) == len(nums):
                res.append(curr[::])
                return
            
            for i in range(len(available)):
                curr.append(available[i])
                backtrack(curr, available[: i] + available[i + 1::])
                curr.pop()
        
        backtrack([], nums)
        return res
  - using a set will result in duplicates being added to the result variable

4. Space complexity for sets/hashmaps involving letters will be O(1) since at most 26 characters will be in there. Be aware of problem context.

5. cannot delete from a hashmap while iterating through it, otherwise you will get "dictionary changed size during iteration" error
  - we need to create a to_delete array and delete that way
  - while counts:
      to_delete = []
      for key in counts:
        res.append(key)
        counts[key] -= 1
        if counts[key] == 0:
          to_delete.append(key)
            
        for key in to_delete:
          del counts[key]

6. sorting a string using sorted returns a list
    ->  tea = "tea"
        print(sorted(tea))
         -> ['a', 'e', 't']
  we also CANNOT call sort directly on a string, only works with sorted
    -> tea.sort() # INVALID

7. enumerate only accepts two arguments. 
- if we need the index of the edge list (for example a parallel list of weights)
- then we need to unpack the edge list inside a tuple
ex: graph = defaultdict(list)
    for i, (u, v) in enumerate(edges):
      graph[u].append((v, weight[i]))
      graph[v].append((u, weight[i]))
