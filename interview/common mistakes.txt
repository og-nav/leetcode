1. need to remember that the second arguments in python are often non-inclusive
  - so for example, if you are using a for loop to do sliding window, you need to remember that the second argument
    of range and the second argument of the slice are non-inclusive, so you need to do + 1 for one of them. otherwise
    you will cut out the last element
    ex:
    for i in range(len(prefix), len(s) + 1):
      if s[i - len(prefix): i] == prefix:
        continue # some action

2. when using "".join(nums), all elements in the array must be strings
  - ex: nums = [1, 2, 3] -> res = "".join(nums) -> WRONG
        nums = ['1', '2', '3'] -> res = "".join(nums) -> RIGHT

3. when backtracking in an n! setting, use a list instead of a set for the available numbers
  - def backtrack(curr, available):
            if len(curr) == len(nums):
                res.append(curr[::])
                return
            
            for i in range(len(available)):
                curr.append(available[i])
                backtrack(curr, available[: i] + available[i + 1::])
                curr.pop()
        
        backtrack([], nums)
        return res
  - using a set will result in duplicates being added to the result variable